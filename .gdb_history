break hashPreprocessorDirectives
run
print tokens[0]
print tokens[1]
print tokens[2]
quit
break flexer.c:262
run
print tokens[0]
print scanner.current
layout src
next
print source
next
print scanner.current
next
print column
quit
break flexer.c:262
layout src
run
ref
c
run
ref
next
print scanner.current
next
print column
next
print scanner.current
print scanner.start
print tokens[0]
print tokens[1]
mext
next
print column
print scanner.current
run
ref
c
print column
run
print column
next
ref
next
print column
next
print scanner.current - source
next
print column
quit
break flexer.c:262
run
layout src
next
print column
next
next
print column
print scanner.current
next
step
next
print scanner.current
print scanner.start
print column
next
print scanner.current
print tokens[2]
next
print tokens[2]
next
next
print column
next
print column
next
print scanner.current
print scanner.start
next
print scanner.start
print scanner.current
print column
next
next
print tokens[3]
print tokens[3].data
print *(int*)tokens[3].data
next
print tokens[SrcTokenStream.tokenIndex].type
next
print tokens[SrcTokenStream.tokenIndex].type
print SrcTokenStream.tokenIndex 
print tokens[4].type
layout src
next
quit
quit
break flexer.c:262
run
print tokens[0]
layout src
c
print scanner.current
print column
print line
print scanner.line
c
print scanner.current
print column
next
print column
print scanner.current
print scanner.start
next
next
print tokens[2]
c
print tokens[3]
print tokens[2]
print tokens[3]
run
c
c
print SrcTokenStream.tokenIndex 
print scanner.current
next
print scanner.current
next
print column
next
print tokens[3]
finish
print tokens[3]
print tokens[2]
ref
break hashPreprocessorDirectives
c
c
delete 1
c
ref
quit
break printTokens 
layout src
quit
break printTokens
run
layout src
delete 2
delete 21
delete 1
break flexer.c:535
c
ref
info break
delete 2
break flexer.c:526
delete 3
break flexer.c:536
run
print i
next
ref
next
ref
next
print TokenStrings[tokens[i].type]
next
ref
next
print tokens
print tokens[i'
print tokens[i]
next
print TokensStrings[tokens[i].type]
print TokenStrings[tokens[i].type]
next
ref
qui
break debug1
run
layout src
next
next
ref
quit
break debug1
layout src
run
ref
print *(Token*)currWorkingToken 
next
c
print *(Token*)currWorkingToken 
c
print *(Token*)currWorkingToken 
c
print *(Token*)currWorkingToken 
c
print *(Token*)currWorkingToken 
c
run
yc
c
c
c
print *(Token*)currWorkingToken 
c
print *(Token*)currWorkingToken 
layout src
next
print $edi
print (TokenType)$edi
next
print (TokenType)$edi
next
c
quit
break debug1
layout src
run
ref
c
c
print *(Token*)currWorkingToken 
c
print *(Token*)currWorkingToken 
c
print *(Token*)currWorkingToken 
layout src
next
print *(Token*)$rsi
quit
break debug1
c
run
c
c
c
c
print *(Token*)$rsi
next
print *(Token*)$rsi
next
print *(Token*)$rsi
print *(char*)$rsi
layout src
next
quit
break hashPreprocessorDirectives
layout src
run
quit
