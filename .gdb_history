run
layout src
next
next
print *peek(parser)
quit
set args main.scrm
break parseTranslationUnit 
layout src
run
ref
next
print parser
print *parser
next
print *parser
quit
set args main.scrm
break parseTranslationUnit 
layout src
run
ref
next
print *parser
next
print peek(parser)
print *peek(parser)
next
step
print *peek(parser)
print tokenIndex
next
print typeToken
next
print id
print *id
next
print *peek(parser)
next
print typeToken
print *id
step
next
print identfier
print identfier
print identifier 
next
print returnType
next
next
next
print body
print *body
break fparse.c:195
run
ref
c
print parser
print *parser
print *parser->current
step
next
next
next
print *parser->current
step
nextnext
next
step
next
quit
break printAST
layout src
set args main.scrm
run
ref
next
ref
step
next
ref
print *node
quit
set args main.scrm
break printAST
run
layout src
ref
next
step
next
rrun
run
ref
next
step
ref
pritn *node
print *node
quit
quit
break parseTranslationUnit 
set args main.scrm
layout src
run
ref
next
run
ref
next
quit
quit
set args main.scrm
layout src
break parseTranslationUnit 
run
ref
print parser
print *parser
watch parser.errors
watch parser->errors
c
info watch
delete 2
ref
where
print tokenIndex
info watch
delete 3
watch tokenIndex
run
ref
c
c
c
c
c
c
c
c
c
next
next
print *parser
print *parser->current
next
step
next
step
next
next
print typeToken
next
print id
print *id
set args main.scrm
quit
break printAST
run
next
layout src
next
step
next
step
finish
next
break fparse.c:631
c
ref
next
print node
print *node
quit
break printAST
run
layout src
next
step
print *node
print isLastChild
print depth
next
step
next
print isLastChild 
quit
break printAST
run
layout src
next
step
ref
next
print *node
quit
quit
break fparse.c:179
run
c
layout src
next
print type
print typeToken
next
next
next
print identifier 
next
print expr
print *expr
quit
quit
break fparse.c:572
run
c
layout src
next
next
next
eun
run
c
c
run
c
ref
next
ref
next
step
next
print *node
quit
quit
break fparse.c:317
run
ref
next
next
next
print expr
run
run
ref
next
step
step
next
print token
print *token
run
ref
next
step
quit
